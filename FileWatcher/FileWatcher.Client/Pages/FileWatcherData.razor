@page "/file-watcher"
@using Newtonsoft.Json

<div class="row justify-content-center">
    <div class="col-4 my-auto">
        <h3 class="mb-0">File-Watcher</h3>
    </div>
    <div class="col-5 my-auto">
        <div class="input-group">
            <input type="text" class="form-control text-center" placeholder="Cesta k analyzovanému adresáři" aria-label="Cesta" aria-describedby="basic-addon2" @bind-value="@Path">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" disabled="@IsLoading" @onclick="@( async () => { await CallFileLogApi(Path) ;} )">
                    @if (IsLoading)
                    {
                        <span>Načítám...</span>
                    }
                    else
                    {
                        <span>Analyzovat</span>
                    }
                </button>
            </div>
        </div>
    </div>
    <div class="col-3"></div>
</div>

@if (IsLoading == false)
{
    @if (FilesLogs?.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>File</th>
                    <th>Version</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in FilesLogs)
                {
                    <tr>
                        <td>@log.FileAddress</td>
                        <td>@log.FileVersion</td>
                        <td>@log.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (FilesNewOrChanged)
    {
        <div class="row justify-content-center">
            <div class="m-5"style="text-align: center;">
                <span>Nový adresář nebo žádné změny</span>
            </div>
        </div>
    }
}
else
{
    <div class="row justify-content-center">
        <div class="spinner-border m-5" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}


@code {
    private bool FilesNewOrChanged;
    private List<FileLogDto>? FilesLogs;
    private string Path = "";
    private bool IsLoading = false;
    private bool ShowContent = false;

    private async Task CallFileLogApi(string path)
    {
        //path = "das";
        //path = @"C:\Users\Kucer\Desktop\MigraceJUST";
        //path = @"C:\Users\Kucer\Desktop\smlouvy";
        //path = "~/sample-data";
        //FilesNewOrChanged = true; //předpokládám že soubory se změnily nebo se analyzuje nový adresář

        IsLoading = true;
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync($"https://localhost:7155/v1/file-watcher?path={path}");

        var output = await response.Content.ReadAsStringAsync();
        var deserializedJson = JsonConvert.DeserializeObject<List<FileLogDto>>(output);

        FilesNewOrChanged = deserializedJson.All(x => x.Status == FileStatus.Original); //soubory se nezměnily
        FilesLogs = deserializedJson.Where(x => x.Status != FileStatus.Original).ToList();
        ShowContent = true;

        IsLoading = false;
    }

    private void RefresState()
    {
        ShowContent = false;
    }

    public class FileLogDto
    {
        public string RootDirectoryAddress { get; set; }
        public string FileAddress { get; set; }
        public int? FileVersion { get; set; }
        public FileStatus Status { get; set; }
        public DateTime LastWriteTime { get; set; }
        public string ComputedHash { get; set; }
    }

    public enum FileStatus
    {
        Added,
        Modified,
        Deleted,
        Original
    }
}
